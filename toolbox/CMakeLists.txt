# Copyright (C) 2018 Istituto Italiano di Tecnologia (IIT). All rights reserved.
# This software may be modified and distributed under the terms of the
# GNU Lesser General Public License v2.1 or any later version.

# FIND DEPENDENCIES
# =================

find_package(YARP REQUIRED)

# Fail if YARP is not compiled as shared library
# see https://github.com/robotology/codyco-modules/issues/44
if(NOT ${YARP_IS_SHARED_LIBRARY})
    message(FATAL_ERROR "YARP was found, but it was compiled as static library. A shared library version of YARP is required.")
endif()

find_package(iDynTree 0.7.2 REQUIRED)

# This find loads Eigen.
# It would be nice using the EigenConfig shipped with eigen package, but
# on Ubuntu 16.04 eigen is old and provides only FindEigen.
find_package(Eigen3 REQUIRED)

# OPTIONS AND INCLUDES
# ====================

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${YARP_MODULE_PATH})
include(YarpInstallationHelpers)
yarp_configure_external_installation(codyco)

# Add configure_block macro
include(Utilities)

# Settings for RPATH
if(NOT MSVC)
    option(WB-TOOLBOX_ENABLE_RPATH "Enable RPATH installation" TRUE)
    mark_as_advanced(WB-TOOLBOX_ENABLE_RPATH)
endif(NOT MSVC)

# Export all symbols in Windows
set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)

# Add a postfix to Windows libraries compiled in debug
if(MSVC)
    set(CMAKE_DEBUG_POSTFIX "d")
endif()

# Control where binaries and libraries are placed in the build folder.
# This simplifies tests running in Windows.
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}")

include(AddInstallRPATHSupport)
add_install_rpath_support(BIN_DIRS ${CMAKE_INSTALL_PREFIX}/bin
                          LIB_DIRS ${CMAKE_INSTALL_PREFIX}/mex ${CMAKE_INSTALL_PREFIX}/lib
                          DEPENDS WB-TOOLBOX_ENABLE_RPATH
                          USE_LINK_PATH)

# TOOLBOX SHARED LIBRARY
# ======================
#
# This library will be linked to the S-Function for the usage in Simulink, and to
# another implementation for its usage within the code generated by the Simulink Coder.

set(WBTOOLBOX_EXT_LIBRARIES "")

configure_block(
    BLOCK_NAME "Base"
    LIST_PREFIX WBT
    SOURCES src/base/Block.cpp
            src/base/BlockInformation.cpp
            src/base/Configuration.cpp
            src/base/Log.cpp
            src/base/Parameter.cpp
            src/base/Parameters.cpp
            src/base/ConvertStdVector.cpp
            src/base/RobotInterface.cpp
            src/base/Signal.cpp
            src/base/WholeBodySingleton.cpp
            src/base/WBBlock.cpp
    HEADERS include/base/Block.h
            include/base/BlockInformation.h
            include/base/Configuration.h
            include/base/Log.h
            include/base/Parameter.h
            include/base/Parameters.h
            include/base/ConvertStdVector.h
            include/base/RobotInterface.h
            include/base/Signal.h
            include/base/WholeBodySingleton.h
            include/base/WBBlock.h
)

# configure_block(BLOCK_NAME "Inverse Kinematics"
#     GROUP "Model"
#     LIST_PREFIX WBT
#     SOURCES src/RemoteInverseKinematics.cpp
#     HEADERS include/RemoteInverseKinematics.h)

option(WBT_USES_ICUB "Build models which need iCub library (e.g. Minimum Jerk Traj. Generator)" ON)

if(WBT_USES_ICUB)
    find_package(ICUB REQUIRED)

    configure_block(BLOCK_NAME "Minimum Jerk Trajectory Generator"
        GROUP "Utilities"
        LIST_PREFIX WBT
        SOURCES src/MinimumJerkTrajectoryGenerator.cpp
        HEADERS include/MinimumJerkTrajectoryGenerator.h)

    configure_block(BLOCK_NAME "Discrete Filter"
        GROUP "Utilities"
        LIST_PREFIX WBT
        SOURCES src/DiscreteFilter.cpp
        HEADERS include/DiscreteFilter.h)

    # if (${ICUB_USE_IPOPT})
    #     find_package(iDynTree REQUIRED)
    #     add_definitions(-DWBT_USES_IPOPT)
    #     configure_block(BLOCK_NAME "Inverse Kinematics"
    #         GROUP "Model"
    #         LIST_PREFIX WBT
    #         SOURCES src/InverseKinematics.cpp
    #         HEADERS include/InverseKinematics.h)
    #
    #     include_directories(SYSTEM ${iKin_INCLUDE_DIRS})
    # endif()
endif()

# Search qpOASES and enable block which depends on it
find_package(qpOASES)
if(NOT WBT_USES_QPOASES)
    option(WBT_USES_QPOASES "Compile also qpOASES-related components" ${qpOASES_FOUND})
endif()

configure_block(BLOCK_NAME "Yarp Read"
    GROUP "Utilities"
    LIST_PREFIX WBT
    SOURCES src/YarpRead.cpp
    HEADERS include/YarpRead.h)

configure_block(BLOCK_NAME "Yarp Write"
    GROUP "Utilities"
    LIST_PREFIX WBT
    SOURCES src/YarpWrite.cpp
    HEADERS include/YarpWrite.h)

configure_block(BLOCK_NAME "Real Time Synchronizer"
    GROUP "Utilities"
    LIST_PREFIX WBT
    SOURCES src/RealTimeSynchronizer.cpp
    HEADERS include/RealTimeSynchronizer.h)

configure_block(BLOCK_NAME "Model Partitioner"
    GROUP "Utilities"
    LIST_PREFIX WBT
    SOURCES src/ModelPartitioner.cpp
    HEADERS include/ModelPartitioner.h)

configure_block(BLOCK_NAME "Yarp Clock"
    GROUP "Utilities"
    LIST_PREFIX WBT
    SOURCES src/YarpClock.cpp
    HEADERS include/YarpClock.h)

if(WBT_USES_QPOASES)
    configure_block(BLOCK_NAME "qpOASES"
        GROUP "Utilities"
        LIST_PREFIX WBT
        SOURCES src/QpOases.cpp
        HEADERS include/QpOases.h)
endif()

configure_block(BLOCK_NAME "Simulator Synchronizer"
    GROUP "Utilities"
    LIST_PREFIX WBT
    SOURCES src/SimulatorSynchronizer.cpp
    HEADERS include/SimulatorSynchronizer.h)
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/autogenerated)
list(APPEND WBTOOLBOX_EXT_LIBRARIES "ClockServer")

configure_block(BLOCK_NAME "Mass Matrix"
    GROUP "Model"
    LIST_PREFIX WBT
    SOURCES src/MassMatrix.cpp
    HEADERS include/MassMatrix.h)

configure_block(BLOCK_NAME "Inverse Dynamics"
    GROUP "Model"
    LIST_PREFIX WBT
    SOURCES src/InverseDynamics.cpp
    HEADERS include/InverseDynamics.h)

configure_block(BLOCK_NAME "Centroidal Momentum"
    GROUP "Model"
    LIST_PREFIX WBT
    SOURCES src/CentroidalMomentum.cpp
    HEADERS include/CentroidalMomentum.h)

configure_block(BLOCK_NAME "Forward Kinematics"
    GROUP "Model"
    LIST_PREFIX WBT
    SOURCES src/ForwardKinematics.cpp
    HEADERS include/ForwardKinematics.h)

configure_block(BLOCK_NAME "Jacobian"
    GROUP "Model"
    LIST_PREFIX WBT
    SOURCES src/Jacobian.cpp
    HEADERS include/Jacobian.h)

configure_block(BLOCK_NAME "DotJ Nu"
    GROUP "Model"
    LIST_PREFIX WBT
    SOURCES src/DotJNu.cpp
    HEADERS include/DotJNu.h)

configure_block(BLOCK_NAME "Relative Transform"
    GROUP "Model"
    LIST_PREFIX WBT
    SOURCES src/RelativeTransform.cpp
    HEADERS include/RelativeTransform.h)

configure_block(BLOCK_NAME "Set References"
    GROUP "Actuators"
    LIST_PREFIX WBT
    SOURCES src/SetReferences.cpp
    HEADERS include/SetReferences.h)

configure_block(BLOCK_NAME "Set Low-Level PIDs"
    GROUP "Actuators"
    LIST_PREFIX WBT
    SOURCES src/SetLowLevelPID.cpp
    HEADERS include/SetLowLevelPID.h)

configure_block(BLOCK_NAME "Get Measurement"
    GROUP "State"
    LIST_PREFIX WBT
    SOURCES src/GetMeasurement.cpp
    HEADERS include/GetMeasurement.h)

configure_block(BLOCK_NAME "Get Limits"
    GROUP "State"
    LIST_PREFIX WBT
    SOURCES src/GetLimits.cpp
    HEADERS include/GetLimits.h)

get_property(ALL_HEADERS GLOBAL PROPERTY WBT_HEADERS)
get_property(ALL_SOURCES GLOBAL PROPERTY WBT_SOURCES)

add_library(WBToolboxLibrary SHARED
    ${ALL_HEADERS} ${ALL_SOURCES}
)

set_target_properties(WBToolboxLibrary PROPERTIES
    OUTPUT_NAME "WBToolbox"
    # VERSION ${PROJECT_VERSION}
    PUBLIC_HEADER "${ALL_HEADERS}"
)

if(MSVC)
    # Import math symbols from standard cmath
    target_compile_definitions(WBToolboxLibrary PRIVATE "_USE_MATH_DEFINES")
endif()

# Set other properties of the target WBToolboxLibrary
# ---------------------------------------------------

target_include_directories(WBToolboxLibrary PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/base>
)

target_include_directories(WBToolboxLibrary SYSTEM PRIVATE ${EIGEN3_INCLUDE_DIR})

list(APPEND WBTOOLBOX_EXT_LIBRARIES
    iDynTree::idyntree-core
    iDynTree::idyntree-model
    iDynTree::idyntree-modelio-urdf
    iDynTree::idyntree-high-level
)

list(APPEND WBTOOLBOX_EXT_LIBRARIES
    YARP::YARP_OS
    YARP::YARP_dev
    YARP::YARP_math
)

target_link_libraries(WBToolboxLibrary PRIVATE ${WBTOOLBOX_EXT_LIBRARIES})

if(WBT_USES_ICUB)
    target_compile_definitions(WBToolboxLibrary PUBLIC "WBT_USES_ICUB")
    target_link_libraries(WBToolboxLibrary PRIVATE ctrlLib)

    # Manually include iCub include folders. They are not exported by the linked library.
    include_directories(${ctrlLib_INCLUDE_DIRS})

#    if (${ICUB_USE_IPOPT})
#        target_link_libraries(WBToolboxLibrary PUBLIC iKin)
#        include_directories(${iKin_INCLUDE_DIRS})
#    endif()
endif()

if(WBT_USES_QPOASES)
    target_compile_definitions(WBToolboxLibrary PUBLIC "WBT_USES_QPOASES")
    target_link_libraries(WBToolboxLibrary PRIVATE ${qpOASES_LIBRARIES})

    # Manually include qpOASES include folders. They are not exported by the linked library.
    target_include_directories(WBToolboxLibrary PRIVATE ${qpOASES_INCLUDE_DIRS})
endif()

# Install the library
install(
    TARGETS WBToolboxLibrary
    EXPORT WBToolboxLibrary
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/WB-Toolbox
)

include(InstallBasicPackageFiles)
set(WBToolboxLibraryExport_DEPENDENCIES YARP iDynTree)
if(WBT_USES_QPOASES)
    list(APPEND WBToolboxLibraryExport_DEPENDENCIES qpOASES)
endif()

install_basic_package_files(WBToolboxLibrary
    VERSION ${PROJECT_VERSION}
    DEPENDENCIES ${WBToolboxLibraryExport_DEPENDENCIES}
    COMPATIBILITY AnyNewerVersion
    TARGETS_PROPERTY WBToolboxLibrary
    NO_CHECK_REQUIRED_COMPONENTS_MACRO
)

## TOOLBOX S-FUNCTION MEX LIBRARY
## ==============================

if(WBTOOLBOX_USES_MATLAB)
    matlab_add_mex(
        NAME WBToolboxMex
        OUTPUT_NAME WBToolbox
        SRC include/base/SimulinkBlockInformation.h
        src/base/SimulinkBlockInformation.cpp
        include/base/Factory.h
        src/base/Factory.cpp
        src/base/WBToolbox.cpp
        LINK_TO MxAnyType WBToolboxLibrary
        )

    target_compile_definitions(WBToolboxMex PUBLIC "MATLAB_MEX_FILE")
    target_include_directories(WBToolboxMex PUBLIC
        ${Matlab_INCLUDE_DIRS}
        ${Matlab_ROOT_DIR}/simulink/include)

    # Install S-Function
    install(TARGETS WBToolboxMex DESTINATION ${CMAKE_INSTALL_PREFIX}/mex)

    # Install TLC file
    install(
        FILES ${CMAKE_CURRENT_SOURCE_DIR}/WBToolbox.tlc
        DESTINATION ${CMAKE_INSTALL_PREFIX}/mex)
endif()

# MATLAB CLASSES AND SIMULINK CONFIGURATION
# =========================================

# Export the library
# ------------------

# The logic about library development is the following:
#
# * Developers should edit the library (e.g. changing block's masks) in the
#   toolbox/matlab/library/WBToolboxLibrary_repository.mdl file.
# * Developers should export the changes using the export_library custom target.
# * Users will use the files installed from the exported/ folder.

if(WBTOOLBOX_USES_MATLAB)
    # Custom script to generate the library to be committed on the repository.
    # This target is excluded from the normal build and must be called explicitly by the
    # developer who modifies the library.
    add_custom_target(export_libraries
        ${Matlab_MAIN_PROGRAM} -nosplash -nodesktop -r export_library
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/matlab
        )
    set_target_properties(export_libraries PROPERTIES EXCLUDE_FROM_DEFAULT_BUILD 1)

    # Install all the other files needed by the toolbox
    # -------------------------------------------------

    set(WB-TOOLBOX_SHARE_DIR "${CMAKE_INSTALL_PREFIX}/share/WB-Toolbox")

    # The following line is to properly configure the installation script of the toolbox
    configure_file(
        ${CMAKE_CURRENT_SOURCE_DIR}/matlab/startup_wbitoolbox.m.in
        ${CMAKE_BINARY_DIR}/startup_wbitoolbox.m
        )

    # Install configuration files
    install(
        FILES ${CMAKE_BINARY_DIR}/startup_wbitoolbox.m
        DESTINATION ${WB-TOOLBOX_SHARE_DIR}
        )
    install(
        FILES ${CMAKE_CURRENT_SOURCE_DIR}/matlab/slblocks.m
        DESTINATION ${WB-TOOLBOX_SHARE_DIR}
        )

    # Install the Matlab package folder
    install(
        DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/matlab/+WBToolbox
        DESTINATION ${WB-TOOLBOX_SHARE_DIR}
        )

    # Install images for the Simulink Library
    install(
        DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/images
        DESTINATION ${WB-TOOLBOX_SHARE_DIR}
        )

    # Install script for enabling debugging capabilities
    # (update the mex and avoid restarting matlab)
    configure_file(
        matlab/setupForMatlabDebug.m.in
        ${CMAKE_BINARY_DIR}/toolbox/setupForMatlabDebug.m
        @ONLY
        )

    #if MAJOR >= 2014 && MINOR >= b
    # Note: We had issues with Matlab 2014b and .mdl models.
    # But this issue seems to have been disappeared in 2015b. We have to check if we need to enable this if again
    # TODO: check if the mdl support is still required
    # if (${Matlab_VERSION_STRING} GREATER "8.3")
    # install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/WBToolboxLibrary.slx DESTINATION ${WB-TOOLBOX_SHARE_DIR})
    # else()
    # install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/WBToolboxLibrary.mdl DESTINATION ${WB-TOOLBOX_SHARE_DIR})
    # endif()
    install(
        FILES ${CMAKE_CURRENT_SOURCE_DIR}/matlab/library/exported/WBToolboxLibrary.slx
        DESTINATION ${WB-TOOLBOX_SHARE_DIR}
        )
endif()

# AUTOMATIC CODE GENERATION SUPPORT
# =================================

set(CODER_HDR
    include/base/CoderBlockInformation.h
    include/base/GeneratedCodeWrapper.h
)

set(CODER_SRC
    src/base/CoderBlockInformation.cpp
)

add_library(WBToolboxCoder SHARED ${CODER_HDR} ${CODER_SRC})
set_target_properties(WBToolboxCoder PROPERTIES
    # VERSION ${PROJECT_VERSION}
    PUBLIC_HEADER "${CODER_HDR}"
)

target_link_libraries(WBToolboxCoder PUBLIC WBToolboxLibrary)
target_include_directories(WBToolboxCoder INTERFACE
    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/WB-Toolbox>)

# INSTALL THE WBToolboxCoder TARGET
# =================================
#
# This target will be imported and linked with the code automatically
# generated by Simulink Coder.

install(
    TARGETS WBToolboxCoder WBToolboxLibrary
    EXPORT WBToolboxSimulinkCoder
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/WB-Toolbox
)

set_property(GLOBAL APPEND
             PROPERTY WBToolboxSimulinkCoderExport_TARGETS
             WBToolboxCoder WBToolboxLibrary)

set(WBToolboxSimulinkCoderExport_DEPENDENCIES YARP iDynTree)
if(WBT_USES_ICUB)
    list(APPEND WBToolboxSimulinkCoderExport_DEPENDENCIES iCub)
endif()

include(InstallBasicPackageFiles)
install_basic_package_files(WBToolboxSimulinkCoder
    VERSION ${PROJECT_VERSION}
    DEPENDENCIES ${WBToolboxSimulinkCoderExport_DEPENDENCIES}
    COMPATIBILITY AnyNewerVersion
    TARGETS_PROPERTY WBToolboxSimulinkCoderExport_TARGETS
    NO_CHECK_REQUIRED_COMPONENTS_MACRO
)
