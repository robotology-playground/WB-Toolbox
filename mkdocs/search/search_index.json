{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Whole-Body Toolbox","text":""},{"location":"#a-simulink-toolbox-for-whole-body-control","title":"A Simulink Toolbox for Whole-Body Control","text":"<p>\u200b    This toolbox allows non-programming experts and researchers approaching Whole-Body Control to more easily develop controllers on either simulated or real <code>YARP</code>-based robotic platforms. \u200b    Develop to deployment time is minimized by exploiting the rich variety of Simulink's toolboxes and its capabilities on rapid prototyping and visual debugging.</p> <p><code>WBT</code> is based on the dataflow framework <code>blockfactory</code>. It mainly wraps functionalities of the <code>YARP</code> middleware and the <code>iDynTree</code> rigid-body dynamics library, providing an interface compatible with dataflow programming. The <code>WBT</code> library can be embedded in any C++ framework and run from all the engines supported by <code>blockfactory</code>, we mainly use and support Simulink by providing a Simulink Library.</p>"},{"location":"#who-uses-wbt","title":"Who uses <code>WBT</code>?","text":"<p><code>WBT</code> is used extensively in the controllers stored in robotology/whole-body-controllers.</p> <p>This video shows the latest results on the iCub robot achieved in the EU project CoDyCo in which a top level controller implemented with the robotology/wb-toolbox achieves a running <code>100 Hz</code> rate.</p> <p></p>"},{"location":"#citing-this-work","title":"Citing this work","text":"<p>Romano F., Traversaro S., Pucci D., Nori F.</p> <p>A Whole-Body Software Abstraction layer for Control Design of free-floating Mechanical Systems</p> <p>Journal of Software Engineering for Robotics, 2017</p> Bibtex citation <pre><code>@ARTICLE{RomanoWBI17Journal,\nauthor={F. Romano and S. Traversaro and D. Pucci and F. Nori},\njournal={Journal of Software Engineering for Robotics},\ntitle={A Whole-Body Software Abstraction layer for Control Design of free-floating Mechanical Systems},\nyear={2017},\n}\n</code></pre>"},{"location":"Migration_from_WB-Toolbox_2.0/","title":"From WB-Toolbox 2.0 to WB-Toolbox 3.*","text":"<p>Most of the major changes delivered with the <code>3.0</code> version of the <code>WB-Toolbox</code> don't affect directly the end-user. Under the hood the toolbox had an important polishing, and the small manual intervention required by this new release match the new features which have been developed.</p> <p>You can read Release Notes for a detailed overview. Below are described only the steps required to port Simulink models to this new release.</p>"},{"location":"Migration_from_WB-Toolbox_2.0/#new-toolbox-configuration","title":"New toolbox configuration","text":"<p>The <code>WB-Toolbox 2.0</code> was based on top of <code>yarpWholeBodyInterface</code>, which configuration was stored in a <code>yarpWholeBodyInterface.ini</code> file. This file was retrieved by <code>ResourceFinder</code> and its information was then loaded into the toolbox.</p>"},{"location":"Migration_from_WB-Toolbox_2.0/#store-the-configuration-in-the-simulink-model","title":"Store the configuration in the Simulink model","text":"<p><code>WB-Toolbox 3.0</code> deprecated the support of <code>yarpWholeBodyInterface</code>, and for reducing the complexity and sparsity of the information storage it allows configuring a Simulink model from the model itself.</p> <p>The new Configuration block allows inserting information such as Robot Name, URDF Name, Controlled Joints, ... directly from the block's mask.</p>"},{"location":"Migration_from_WB-Toolbox_2.0/#load-the-configuration-from-the-workspace","title":"Load the configuration from the Workspace","text":"<p>Sometimes it might be useful loading the model's configuration directly from the Workspace. For this purpose, a new <code>WBToolbox.WBToolboxConfig</code> class has been developed. The Configuration block needs to know only the name of the variable which refers to the object. Its data is then read before the simulation runs.</p> <p>This snippet of code shows an example of how to initialize a configuration object:</p> <pre><code># Initialize a config object\nWBTConfigRobot = WBToolbox.WBToolboxConfig;\n\n# Insert robot data\nWBTConfigRobot.RobotName = 'icubSim';\nWBTConfigRobot.UrdfFile = 'model.urdf';\nWBTConfigRobot.ControlledJoints = {...\n    'torso_pitch','torso_roll','torso_yaw',...\n    'r_shoulder_pitch','r_shoulder_roll','r_shoulder_yaw','r_elbow',...\n    'l_shoulder_pitch','l_shoulder_roll','l_shoulder_yaw','l_elbow'};\nWBTConfigRobot.ControlBoardsNames = {'torso','left_arm','right_arm'};\nWBTConfigRobot.LocalName = 'WBT';\n</code></pre> <p>To check if the data has been read correctly, it is displayed as read-only in the block's mask.</p> <p>Furthermore, a good sign for a valid configuration is the <code>WBTConfigRobot.ValidConfiguration</code> property.</p>"},{"location":"Migration_from_WB-Toolbox_2.0/#multi-robot-support","title":"Multi-robot support","text":"<p>The scope of the introduction of the Configuration block goes beyond the need of a simpler toolbox configuration. One of the biggest limitation of the <code>2.0</code> version is the support of controlling only one robot per model.</p> <p><code>WB-Toolbox 3.0</code> is now capable of reading / sending data from / to multiple robots. Multiple Configuration blocks can be present in the same model attaining to the following rules:</p> <ul> <li>In the same hierarchical level of a Simulink model, only one Configuration  block should be present. In other words, you should never see in the display more than one Configuration block.</li> <li>Configuration blocks put deeper in the hierarchy (e.g. in a Subsystem) override the previous ones.</li> </ul> <p>There are a few pitfalls which are worth to be highlighted:</p> <ul> <li>It is legit having two Subsystems with different Configuration blocks which point to the same robot. They can have for instance a different joint list and use different control boards. Although, despite reading information never creates problems, sending data to the robot in such scenario can be disastrous. In fact, consider the case these two subsystems share one link, and configure it in two different control modes (e.g. Position and Torque). Sending references to this link causes unpredictable effects.</li> <li>In line of theory it would be possible to have two subsystems in which the first one refers to a Gazebo model and the second one to a real robot. However, this case causes unpredictable behaviour for what concerns the synchronization. In fact, two different blocks for such aim are present in the toolbox: Simulator Synchronizer and Real Time Syncronizer. They should be always used exclusively.</li> </ul>"},{"location":"Migration_from_WB-Toolbox_2.0/#other-manual-edits","title":"Other manual edits","text":"<ul> <li>All the Get Estimate blocks need to be replaced by the new Get Measurement block.</li> <li>All the hardcoded digital filters (e.g. for the joints velocities) have been removed. A new <code>Discrete Filter</code> block has been developed, and it should be manually added if the read raw signal (e.g. from the Get Measurement block) requires filtering.</li> <li>The <code>C++</code> class used by the DoFs Converter changed. All the blocks in the <code>YARP To WBI</code> configuration need to be connected again.</li> <li>The gravity vector is stored is the <code>WBToolboxConfig</code> class. If an alternative value is needed, set it globally directly in the configuration object or scope the block which needs it in a Subsystem with its own Configuration block.</li> <li>In order to set the low level PIDs, loading in the Workspace a <code>WBToolbox.WBTPIDConfig</code> object should be configured as follows:</li> </ul> <pre><code># Initialize an empty object\npids = WBToolbox.WBTPIDConfig;\n\n# Insert data\npids.addPID(WBToolbox.PID('l_elbow', WBToolbox.PID(1, 1, 0)));\npids.addPID(WBToolbox.PID('l_wrist_pitch', WBToolbox.PID(1.5, 0, 0.1)));\npids.addPID(WBToolbox.PID('r_shoulder_pitch', WBToolbox.PID(0.2, 0, 0)));\npids.addPID(WBToolbox.PID('torso_roll', WBToolbox.PID(0.1, 0.1, 0)));\n</code></pre> <p>If some of the controlled joints are not specified, the PIDs are kept in their default values.</p>"},{"location":"Migration_from_WB-Toolbox_2.0/#deprecations","title":"Deprecations","text":"<ul> <li>Inverse Kinematics and Remote Inverse Kinematics have been temporary deprecated. They will see a major release in the coming months. If you need them please do not upgrade to the <code>3.0</code> version.</li> <li>Set Low Level PID block lost the capability of switching between multiple configurations. Since they were stored in an external file, this change is aligned to the simplification process chosen for for the configuration.</li> </ul>"},{"location":"Migration_from_WBI-Toolbox_1.0/","title":"From WBI-Toolbox to WB-Toolbox 2.*","text":"<p>Given a simulink model with some WBI-Toolbox blocks inside, the general procedure is to substitute each block with the corresponding one from WB-Toolbox 2.0. However, there are some things the user should take care while doing this operation. This guide points out the main differences between the two toolboxes. For more information about the WBI-Toolbox, please have a look at the WBI-Toolbox README.</p> <p>This guide follows the WBI and WB Toolbox blocks partitioning in Simulink library. It is divided in the following sections:</p> <ul> <li>Required variables</li> <li>Utilities</li> <li>wholeBodyActuators</li> <li>wholeBodyModel</li> <li>wholeBodyStates</li> </ul>"},{"location":"Migration_from_WBI-Toolbox_1.0/#required-variables","title":"Required variables","text":"<p>As explained in the WB-Toolbox README, first of all the user should define the following variables: - WBT_modelName - WBT_wbiList - WBT_wbiFilename - WBT_robotName</p> <p>They have already meaningful default values. Nevertheless you should take a look at at least the following two variables: - WBT_modelname = 'matlabTorqueBalancing' or be careful that the default name does not conflicts with any other modules or YARP ports - WBT_wbiList   = 'ROBOT_TORQUE_CONTROL_JOINTS_WITHOUT_PRONOSUP' if you simulate a 23-DoFs iCub robot</p>"},{"location":"Migration_from_WBI-Toolbox_1.0/#floating-base-position-estimate","title":"Floating base position estimate","text":"<p>In the WB-Toolbox the world-to-base homogeneous transformation matrix is not calculated inside each block, but it must be provided from the Simulink model as a block input.</p> <p>The world-to-base homogeneous transformation matrix is a 4x4 matrix that maps position and orientation of a rigid body from an initial frame of reference to another.</p> <p>For back-compatibility, the transformation happending under the hood in the WBI-Toolbox can be obtained using forward kinematics blocks as in the following example:</p> <p></p> <p>where forward kinematics is used to compute the transformation matrices from world to the left foot and from world to the root link, while the desired transformation matrix is obtained as a matrices product, using the homogeneous transformation matrix properties.</p>"},{"location":"Migration_from_WBI-Toolbox_1.0/#utilities","title":"Utilities","text":"<p>In this section the user should note that: - the <code>Minimum Jerk Trajectory Generator</code> block has now only the reference trajectory as input. The initial value is automatically taken at startup. - <code>Yarp Read</code> and some other blocks require now the WBT_modelName instead of the localName variable.</p>"},{"location":"Migration_from_WBI-Toolbox_1.0/#wholebodyactuators","title":"wholeBodyActuators","text":"<p>Instead of having different blocks for each kind of control mode, only one block is now present. The user can choose the control mode by double-clicking on it and selecting one of the possible modes (position, position direct, velocity and torques)</p>"},{"location":"Migration_from_WBI-Toolbox_1.0/#wholebodymodel","title":"wholeBodyModel","text":"<p>It is divided into three subsections. The <code>Joint Limits</code> block is now moved into wholeBodyStates section.</p>"},{"location":"Migration_from_WBI-Toolbox_1.0/#dynamics","title":"Dynamics","text":"<ul> <li>the <code>dJdq</code> blocks have been moved into jacobians subsection;</li> <li>for mass matrix, generalized bias forces and centroidal momentum computation is now required to calculate explicitly the world-to-base homogeneous transformation matrix and the base velocity. Furthermore, the base frame pose and velocity and the joint configuration are now separate inputs.</li> </ul>"},{"location":"Migration_from_WBI-Toolbox_1.0/#jacobians","title":"Jacobians","text":"<p>There is now only one generic block for jacobians and one for <code>dJdq</code> calculation. The link with respect to which the Jacobian is computed is determined by its frame name as specified in the URDF model. As for the dynamics, the base pose and velocity and the joint position and velocity are required as input.</p>"},{"location":"Migration_from_WBI-Toolbox_1.0/#kinematics","title":"Kinematics","text":"<p>As for the section Jacobians, there is now only one generic block for forward kinematics computation. World-to-base homogeneous transformation matrix and joint position are the required input.</p>"},{"location":"Migration_from_WBI-Toolbox_1.0/#wholebodystates","title":"wholeBodyStates","text":"<p>As in the previous section, one generic block is used, from which the user can estimate joint position, velocity and acceleration and joint torques. The <code>Joint Limits</code> block is moved into this section.</p>"},{"location":"about/","title":"About","text":"<p><code>WBT</code> has been developed in the Dynamic Interaction Control research line at the Italian Institute of Technology.</p> <p>It was born from the ashes of robotology-playground/WBI-Toolbox.</p> <p>It is used extensively for controllers stored in robotology/whole-body-controllers.</p>"},{"location":"about/#maintainer","title":"Maintainer","text":"<ul> <li>Ferigo Diego (@diegoferigo)</li> </ul>"},{"location":"about/#contributors","title":"Contributors","text":"<p>In alphabetical order:</p> <ul> <li>Eljaik Jorhabib (@jeljaik)</li> <li>Ferigo Diego (@diegoferigo)</li> <li>Nori Francesco (@iron76)</li> <li>Pucci Daniele (@DanielePucci)</li> <li>Romano Francesco (@francesco-romano)</li> <li>Traversaro Silvio (@traversaro)</li> </ul>"},{"location":"about/#acknowledgments","title":"Acknowledgments","text":"<p>The development of <code>WBT</code> is supported by:</p> <ul> <li>FP7 EU projects CoDyCo (No. 600716 ICT 2011.2.1 Cognitive Systems and Robotics)</li> <li>H2020 EU projects AnDy (No. 731540 H2020-ICT-2016-1)</li> </ul>"},{"location":"install/","title":"Install","text":"<p>Disclaimer</p> <p><code>WBT</code> has been widely tested on <code>Ubuntu 16:04</code> and <code>Ubuntu 18.04</code> with Matlab <code>R2017b</code>. If you face any issue either with your OS or Matlab version, please submit an Issue.</p>"},{"location":"install/#requirements","title":"Requirements","text":"<ul> <li><code>blockfactory</code></li> <li><code>YARP</code> compiled as shared library (default behavior)</li> <li><code>iDynTree</code></li> <li><code>YCM</code></li> <li><code>Eigen3</code></li> <li>Supported Operating Systems: Linux, macOS, Windows</li> </ul>"},{"location":"install/#development-requirements","title":"Development requirements","text":""},{"location":"install/#optional-requirements","title":"Optional requirements","text":"<ul> <li><code>iCub</code></li> <li>Gazebo Simulator</li> <li><code>gazebo_yarp_plugins</code></li> <li><code>qpOASES</code></li> <li><code>matio</code></li> <li><code>osqp-eigen</code></li> </ul>"},{"location":"install/#installation","title":"Installation","text":"<p>For a simplified installation procedure, jump to Install using the <code>robotology-superbuild</code>.</p>"},{"location":"install/#dependencies","title":"Dependencies","text":"<p>Install the required and the optional dependencies by following their installation instructions. These instructions need that <code>blockfactory</code>, <code>YARP</code>, <code>iDynTree</code>, <code>YCM</code> and <code>Eigen3</code> packages can be found by <code>CMake</code> using <code>find_package</code>.</p> <p>Warning</p> <p>If an optional dependency is not found, the classes depending on it are not compiled. However, in the Simulink Library the blocks do not disappear. They will just not work, raising an appropriate error.</p>"},{"location":"install/#setup-matlab","title":"Setup Matlab","text":"<p>Matlab and Simulink are not required to build the <code>WBT</code> plugin. However, through <code>blockfactory</code> the plugin library shipped in this repository can be loaded inside a Simulink model. <code>WBT</code> provides a Simulink Library that exposes all the C++ blocks of the plugin to Simulink, wrapping them in user-friendly masks.</p> <p>Info</p> <p>Despite the blocks can be used directly from C++, this usage is not very user friendly. Simulink and alternative visual tools are very convenient solutions to connect blocks together, but nothing prevents using the provided blocks exploiting the <code>blockfactory</code> interfaces. From now on, we assume that you want to use Simulink since it is the most common use case.</p>"},{"location":"install/#for-developers","title":"For developers","text":"<p>Developers of <code>WBT</code> must have Simulink installed in order to operate on the provided Simulink Library.</p> <p>Make sure that <code>CMake</code> is able to find your Matlab installation, or manually set the <code>Matlab_ROOT_DIR</code> environment variable if needed.</p>"},{"location":"install/#download-build-and-install","title":"Download, build and install","text":"<p>If all the dependencies are met, proceed with the following instructions:</p> <p>Commands</p> <p>Substitute to <code>&lt;install-prefix&gt;</code> the absolute path where you want to install the project.</p> <p>````tab=\"GNU / Linux and macOS\" git clone robotology/wb-toolbox.git mkdir -p wb-toolbox/build &amp;&amp; cd wb-toolbox/build cmake .. -DCMAKE_INSTALL_PREFIX= cmake --build . cmake --build . --target install <pre><code>````tab=\"Windows\"\ngit clone https://github.com/robotology/wb-toolbox.git\nmkdir -p wb-toolbox/build &amp;&amp; cd wb-toolbox/build\ncmake .. -DCMAKE_INSTALL_PREFIX=&lt;install-prefix&gt;\ncmake --build . --config Release\ncmake --build . --config Release --target install\n</code></pre>"},{"location":"install/#configuration","title":"Configuration","text":""},{"location":"install/#plugin","title":"Plugin","text":"<p>In order to use Whole-Body Toolbox, the dynamic loader of the operating system should be able to find the plugin library. Add the folder <code>&lt;install-prefix&gt;/lib/blockfactory</code> to the following environment variable depending on the OS:</p> GNU / Linux macOS Windows <code>LD_LIBRARY_PATH</code> <code>DYLD_LIBRARY_PATH</code> <code>Path</code>"},{"location":"install/#matlab","title":"Matlab","text":"<p>In order to use the <code>WBT</code> in Matlab you have to add some folders to the Matlab path.</p> <p>If you usually launch Matlab from the command line, exporting the following environment variable should be enough:</p> <pre><code>export MATLABPATH=&lt;install-prefix&gt;/mex:&lt;install-prefix&gt;/share/WBToolbox:&lt;install-prefix&gt;/share/WBToolbox/images\n</code></pre> <p>If, instead, you use the desktop launcher, a non-persistent Matlab configuration is the following:</p> <pre><code>addpath(['&lt;install-prefix&gt;' /mex])\naddpath(genpath(['&lt;install-prefix&gt;' /share/WBToolbox]))\n</code></pre> <p>We also provide for the latter scenario a persistent configuration of <code>WBT</code>. After the installation, run once the <code>startup_wbitoolbox.m</code> script that you can find in the <code>&lt;install-prefix&gt;/share/WBToolbox</code> directory. It will place a file <code>pathdef.m</code> in your <code>userpath</code> that loads the right variables to Matlab's environment. Note that this usage assumes that Matlab is always launched from the <code>userpath</code> folder.</p>"},{"location":"install/#environment","title":"Environment","text":"<p>Each robot that can be used with <code>WBT</code> has its own configuration files. <code>WBT</code> uses the <code>YARP</code>'s <code>ResourceFinder</code> for finding files in the file system. You should thus follow the related instructions to properly configure your installation (e.g. setting the <code>YARP_DATA_DIRS</code> and <code>YARP_ROBOT_NAME</code> variables).</p>"},{"location":"install/#install-using-the-robotology-superbuild","title":"Install using the <code>robotology-superbuild</code>","text":"<p>The robotology/robotology-superbuild provides an easy way for users to setup an environment by downloading, compiling, installing all the projects together.</p> <p>Follow the superbuild installation instructions and enable the <code>ROBOTOLOGY_ENABLE_DYNAMICS</code> profile. If <code>WBT</code> is not downloaded and built, check that <code>ROBOTOLOGY_USES_MATLAB</code> is <code>ON</code> and <code>ROBOTOLOGY_NOT_USE_SIMULINK</code> is <code>OFF</code>.</p> <p>The configuration of the environment should be straightforward following the Configure your environment and Matlab sections.</p>"},{"location":"license/","title":"License","text":""},{"location":"license/#lgpl-v21-or-any-later-version","title":"LGPL v2.1 or any later version","text":"<p>Copyright (C) 2019 Istituto Italiano di Tecnologia - iCub Facility</p> <p>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</p> <p>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.</p> <p>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA</p>"},{"location":"simulink_basic/","title":"Basic real-time Simulink model","text":"<p>Example</p> <p>You can find the Simulink model created in this tutorial in the examples/ folder</p> <p>Let's start from a blank Simulink model. By default, Simulink selects the solver based on the requirements of the blocks that are part of the model. In most cases, a variable-step solver is selected by default. The aim of the Whole-Body toolbox is developing discrete-time robot controllers, and variable-steps solvers are not compatible with this kind of constraint.</p> <p>Open the model configuration, select a fixed-step solver, and set the step period for instance to 0.01 seconds:</p> <p></p> <p>This configuration forces the simulation loop that computes the output of all blocks to run at 100 Hz.</p>"},{"location":"simulink_basic/#simulating-a-discrete-filter","title":"Simulating a discrete filter","text":"<p>Now let's add a Discrete Filter block that is provided by <code>WBT</code>. This block exposes a C++ class that implements few discrete-time filters. We are interested in using a simple low-pass, configure the block mask to use a cut-off frequency equal to 10 Hz as follows:</p> <p></p> <p>Now let's feed to the block two sine waves at different frequencies, one above and one below the cut-off frequency, plus a scope for visualising the signals:</p> <p></p> <p>Press the Play button, wait the end of the simulation, and inspect the scope. You should obtain the following plot:</p> <p></p> <p>As expected, the high-frequency component has been attenuated by the low-pass filter.</p>"},{"location":"simulink_basic/#real-time-simulation","title":"Real-time simulation","text":"<p>You might have noticed that the simulation runs accelerated. Despite the simulation time is 10 seconds, the simulation is executed to run as fast as possible. Robot controllers, beyond the need to run as discrete-time systems, have to be executed synchronously with the target platform.</p> <p>In this tutorial we will tie the simulation loop to the clock of the operating system. Insert a Real Time Synchronizer block to the model and configure it with the <code>0.01</code> period. If you run again the simulation, you will notice that it takes exactly 10 seconds.</p> <p></p> <p>Note</p> <p>Note that this behaviour is that we expect to have when using real devices. However, before executing a Simulink model on the real robot, it should typically be tested in a simulated environment. We will cover the interfacing with Gazebo in another tutorial, but now you can already understand that in that case we need something similar to the Real Time Synchronizer that instead of using the real-time clock from the operating system uses the simulated clock.</p>"},{"location":"simulink_gazebo/","title":"Simulink and Gazebo","text":"<p>Example</p> <p>You can find the Simulink model created in this tutorial in the examples/ folder</p> <p>In this tutorial we show how to perform a co-simulation when both Simulink and Gazebo are involved. The two simulators by default use their own clock. In order to execute them synchronously, we need that:</p> <ol> <li>The clock used by the two simulators is unique</li> <li>One simulator is the master, and the other the slave</li> </ol> <p>We are not going too much in detail about the implementation of this co-simulation setup, but we try below to clarify the its architecture which starts to be more complex with respect to the previous tutorials.</p>"},{"location":"simulink_gazebo/#sharing-the-clock","title":"Sharing the clock","text":"<p>The most intuitive choice of the clock for a co-simulation setup is using the time of the physic engine, that means Gazebo in this case. The robotology-superbuild already installed and configured the gazebo-yarp-plugins repository, that includes among other a plugin that streams the Gazebo clock to a YARP port. We will sync Simulink to use this network clock instead of the real-time clock, obtaining a synchronized co-simulation.</p> <p>This time, we need to execute <code>yarpserver</code> and launch Gazebo with <code>gazebo -slibgazebo_yarp_clock.so</code>. </p>"},{"location":"simulink_gazebo/#master-and-slave","title":"Master and Slave","text":"<p>Once that the clocks are synced, we need to setup the master and the slave of the co-simulation . We provide a Simulator Synchronizer block that acts very similarly to the Real Time Synchronizer. In this case, beyond assuring that the fixed step duration is respected, the simulator sinchronizer also sends a signal to Gazebo triggering the physics simulation steps. Under this view, Simulink acts as a master and Gazebo as a slave.</p>"},{"location":"simulink_gazebo/#the-network-interface","title":"The network interface","text":"<p>The <code>model.urdf</code> we used in the previous tutorial, beyond defining the description of the robot kinematics, also contains few gazebo plugins that expose a network interface of the simulated robot that matches the network interface of the real robot. Through these plugins we can get measurements and set references of a simulated robot by reading / writing YARP ports. This means that data shared between Simulink and Gazebo pass through the YARP middleware.</p> <p>Note</p> <p>Beyond mere IPC feature, this setup allows us to use the very same Simulink model to control both simulated and real robot, where the only difference between these two setups is the name of the YARP ports of the endpoint.</p>"},{"location":"simulink_gazebo/#simulink-model-to-actuate-a-robot-joint","title":"Simulink model to actuate a robot joint","text":"<p>Create a blank Simulink model and configure the solver to use a fixed-step as explained in the previous tutorial. Drop a Simulator Synchronizer block and a Configuration block. Fill the Configuration block as follows:</p> <p></p> <p>Without entering in details, joints of YARP-based robots are typically grouped in sets called control boards. We want to control the <code>r_elbow</code> joint that is contained in the <code>right_arm</code> control board. Furthermore, we need to set the Robot Name which defines the name of the YARP ports of the endpoint (the simulated robot).</p> <p>Now the <code>r_elbow</code> is configured as controlled joint. Complete the following Simulink model that allows sending a sinusoidal reference in open loop: </p> <p></p> <p>If the YARP server and Gazebo are running and everything else is configured properly, pressing the Play button should start the simulation. You should see that the right elbow of the robot moves as expected. You can also inspect if the trajectory is followed from the scope.</p>"},{"location":"simulink_model_blocks/","title":"Using model blocks","text":"<p>Example</p> <p>You can find the Simulink model created in this tutorial in the examples/ folder</p>"},{"location":"simulink_model_blocks/#explore-the-urdf-model","title":"Explore the urdf model","text":"<p>In this tutorial we will use blocks that expose iDynTree functionalities to compute canonical rigid-body dynamics quantities. We will use the robot description of the humanoid iCub stored in icub-models.</p> <p>If your system is properly configured, iDynTree commands should be available in your path. First, locate the <code>model.urdf</code> file in your filesystem.</p> <p>Tip</p> <p>You should find it in <code>&lt;build&gt;/install/share/iCub/robots/iCubGazeboV2_5/model.urdf</code>, where <code>&lt;build&gt;</code> is the build folder of the superbuild repository.</p> <p>You should be able to execute the following command, that prints a recap of the urdf model listing joints, links, and frames:</p> <pre><code>idyntree-model-info -p -m /absolute/path/to/model.urdf\n</code></pre> <p>We are going to develop a Simulink model that computes in two ways the relative transform between <code>root_link</code> and <code>r_hand</code>.</p>"},{"location":"simulink_model_blocks/#configuration-block","title":"Configuration block","text":"<p>Create a blank Simulink model and configure the solver to use a fixed-step as explained in the previous tutorial.</p> <p>The model is configured through a Configuration block. Select Mask as configuration source, and fill the Data tab as follows:</p> <p></p> <p>The only important sections are the Urdf File containing the absolute path of the file <code>model.urdf</code> and the Controlled Joints that list the degrees of freedom of the robot we want to control. In this case we can operate on the joint angles of the three listed joints.</p> <p>There are other entries in this Configuration block, but they go beyond the scope of this tutorial since they are required to interface with a YARP robot in order to get measurement and set references.</p> <p>Note</p> <p>We used the absolute path to the urdf file to simplify the tutorial. On a typical system we use the filesystem resources provided by YARP to locate files, that allows us to store only the file name.</p>"},{"location":"simulink_model_blocks/#idyntree-blocks","title":"iDynTree blocks","text":"<p>Then, using the Relative Transform and Forward Kinematics block try to obtain the following model:</p> <p></p> <p>The upper part of this models combines the output of two Forward Kinematics blocks to compute the  {}^{r\\_hand}H_{root\\_link} transform, and compares the output with another block that uses the same model and directly provides the same transform. Three blocks generating random numbers define during every simulation loop a new joint configuration (associated to the three joints configured in the Configuration block). The two transform are then subtracted element-wise and summed.</p> <p>Pressing the Play button, the model parses the model stored in the <code>urdf</code> file, configures the joints angles, and provides at every simulation loop the requested transforms. We can visualize the difference of the two noticing the they match almost precisely (excluding small numerical rounding):</p> <p></p> <p>Whole-Body Toolbox provides a many rigid-body dynamics resources that can be used to quickly build complex controllers, have a look for instance to Inverse Dynamics, Jacobian, Mass Matrix, and QP.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#problems-finding-libraries-and-libstdc","title":"Problems finding libraries and <code>libstdc++</code>","text":"<p>In case Matlab has trouble finding a specific library, a workaround is to launch it preloading the variable <code>LD_PRELOAD</code> (or <code>DYLD_INSERT_LIBRARIES</code> on macOS) with the full path of the missing library.</p> <p>On Linux you might have trouble with <code>libstdc++.so</code> since Matlab comes with its own. To use your system's <code>libstdc++</code> you would need to launch Matlab with:</p> <pre><code>LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libstdc++.so.6 matlab\n</code></pre> <p>The current version on Ubuntu 16:04 is <code>libstdc++.so.6</code>, make sure this is the case also on your OS.</p> <p>Tip</p> <p>You could additionally create an alias to launch Matlab this way: <code>alias matlab_wbt=\"cd ~/Documents/MATLAB &amp;&amp; LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libstdc++.so.6 matlab\"</code></p> <p>Info</p> <p>Another solution involving the <code>.matlab7rc.sh</code> file can be found in https://github.com/robotology/codyco-superbuild/issues/141#issuecomment-257892256.</p>"},{"location":"tutorial_introduction/","title":"Introduction","text":"<p>This set of tutorials introduce the basic usage of the Whole-Body Toolbox. They will teach you how to simulate a Simulink model for both simulation and real-time usage, covering also how to interface independently with iDynTree and YARP to respectively compute rigid-body dynamics quantities and interface with a robot.</p> <p>Note</p> <p>YARP and iDynTree are not both strictly required. Most of the code is independent from the two individually, and in theory these two components can be separated, providing the possibility for instance of using only the iDynTree blocks. Though, we use YARP to find files in the filesystem, including the <code>urdf</code> of the model. For this reason, we still require both to be installed in the system. Running the <code>yarpserver</code> is not necessary if YARP is not required during runtime.</p> <ul> <li>Tutorial 1: Basic real-time Simulink Model: This tutorial represents a primer for new users. It explains how to configure a Simulink model to be compatible with real-time usage and shows an example that involves signal filtering.</li> <li>Tutorial 2: Using model blocks: This tutorial introduces the usage of the iDynTree blocks used to compute canonical robotics quantities through rigid-body dynamics. It requires an existing <code>urdf</code> model.</li> <li>Tutorial 3: Simulink and Gazebo: This tutorial shows how to co-simulate the Simulink model interfacing with Gazebo.</li> </ul> <p>These tutorials assume that both blockfactory and wb-toolbox have been already installed and configured properly. Be sure that the Simulink Library contains the blocks provided by Whole-Body Toolbox:</p> <p></p> <p>Warning</p> <p>To simplify the setup of the tutorials, we strongly recommend to install the Whole-Body Toolbox using the robotology-superbuild. We are going to need few more dependencies such that icub-models and gazebo-yarp-plugins that are automatically installed and configured by the superbuild.</p>"}]}